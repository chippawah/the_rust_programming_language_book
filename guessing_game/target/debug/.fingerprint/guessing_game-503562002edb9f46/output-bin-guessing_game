{"message":"refutable pattern in local binding","code":{"code":"E0005","explanation":"Patterns used to bind names must be irrefutable, that is, they must guarantee\nthat a name will be extracted in all cases.\n\nErroneous code example:\n\n```compile_fail,E0005\nlet x = Some(1);\nlet Some(y) = x;\n// error: refutable pattern in local binding: `None` not covered\n```\n\nIf you encounter this error you probably need to use a `match` or `if let` to\ndeal with the possibility of failure. Example:\n\n```\nlet x = Some(1);\n\nmatch x {\n    Some(y) => {\n        // do something\n    },\n    None => {}\n}\n\n// or:\n\nif let Some(y) = x {\n    // do something\n}\n```\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":360,"byte_end":363,"line_start":13,"line_end":13,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let foo = 4;","highlight_start":13,"highlight_end":16}],"label":"patterns `0_u32..=2_u32` and `4_u32..=u32::MAX` not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":360,"byte_end":363,"line_start":13,"line_end":13,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let foo = 4;","highlight_start":13,"highlight_end":16}],"label":"missing patterns are not covered because `foo` is interpreted as a constant pattern, not a new variable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the matched value is of type `u32`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"introduce a variable instead","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":360,"byte_end":363,"line_start":13,"line_end":13,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let foo = 4;","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"foo_var","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0005]\u001b[0m\u001b[0m\u001b[1m: refutable pattern in local binding\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:13:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let foo = 4;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mpatterns `0_u32..=2_u32` and `4_u32..=u32::MAX` not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing patterns are not covered because `foo` is interpreted as a constant pattern, not a new variable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: introduce a variable instead: `foo_var`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the matched value is of type `u32`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0005`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0005`.\u001b[0m\n"}
